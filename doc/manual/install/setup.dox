/*! \page install_setup_page 2.5 Setup Script

\ref install_environment_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_inout_page (Next) 
<BR>

Users must run a bash script named "setup" before attempting to compile 
any code.  This script is located in the pscfpp/ root directory, and 
should be executed from this directory. The setup script installs several
files that are needed to compile simpatico but that are not created by 
cloning the github repository.  Most of the files installed by this script 
are files that the user may need to modify in order to customize or
extend the package. These include include configuration files that a 
user may need to modify in order to adapt the simpatico build system 
to a particular environment or to enable optional features. It is only 
necessary to invoke the setup script once, before the first time you 
compile any code.

The most important file created by the setup script is a file named 
config.mk that is installed the root directory of both the pscfpp/bld 
and pscfpp/src directory trees. This is a makefile fragment that acts 
as the main configuration file for compilation. It assigns values to 
makefile variables that define the compiler executable names for C++ 
and CUDA code, command line options passed to the compilers, and paths 
for required external libraries. The copy of this file in pscfpp/bld 
is the main configuration file for a standard out-of-source build, in 
which intermediate files are created in the bld/ directory tree. The 
brief overview of directions for compilation given on a previous page 
give contain instructions for an out-of-source build, which we 
recommend for most users who are not working on modifications of the 
source code.  The copy in the pscfpp/src directory is the main 
configuration file for an in-source build, which is a useful 
alternative for compilation during development.

\section install_setup_default_sec Default configuration 

To create a default configuration appropriate for a generic unix-like 
environment, change directory (cd) to the pscfpp/ root directory,
and then enter:
\code
> ./setup
\endcode
Note the dot and backslash ("./") before the name of the script.  These 
must be included to tell the unix shell to look for a script named setup 
in the current working directory, rather than searching the directories 
listed in the PATH environment variable for a command with this name.

\section install_setup_local_file_sec Customized configuration

To create the main config.mk files that are installed in pscfpp/bld 
and pscfpp/src, the setup script reads a compiler setup file from the 
pscfpp/make/compiler directory and concatenates it with other makefile 
fragments.  The compiler configuration file is relatively short makefile 
fragment that contains definitions of makefile variables that define 
compiler names, compiler options and paths to external libraries. When 
the "setup" script is invoked with no argument, as indicated above, the 
setup script uses a file named pscfpp/make/compiler/default for this
purpose. This file contains a default configuration appropriate for a 
system in which the gnu g++ C++ compiler is used to compile C++ files, 
the nVidia nvcc compiler is used to compile CUDA files, and paths to 
the gsl and fftw libraries are in common locations.

It is also possible to direct the the setup script to used a customized
compiler configuration file that is created by the user in the
pscfpp/make/compiler directory, by invoking the setup script with the 
name of a customized setup file as an argument.  For example, a user 
could create a file named pscfpp/make/compiler/local by copying the 
default file and then editing the variable definitions in that file 
as needed. Invoking the command
\code
\> ./setup local
\endcode
would then cause the setup script to create config.mk configuration 
files that contain the contents of the file pscfpp/make/compiler/local. 
When the setup script is invoked with one argument, the argument is 
interpreted as the base name of a file in the pscfpp/make/compiler 
directory. Invoking setup with no argument is thus equivalent to the 
command "./setup default" 

In order to understand the meanings of the variables defined in the 
compiler setup files, we recommend that you first run the setup script 
with no argument and the read the comments in the file bld/config.mk that 
is created by the setup script, which briefly explain the meaning and 
use of each of the makefile variables. If you compare the resulting file 
to the file make/compiler/default, you will see that the "default" 
compiler setup file will have simply been copied into the middle part 
of the bld/config.mk file. 

Users may change values of variables defined in the main configuration 
file either by making a customized compiler setup file in the 
make/compiler directory before running the setup script, as described 
above, or by editing directly editing the files bld/config.mk and 
src/config.mk after running the setup script, or both. The advantages 
of storing required changes in a compiler setup file in the make/compiler 
directory, rather than just editing the file src/config.mk are that:

   - The files src/config.mk and bld/config.mk will be erased if you 
     invoke "make veryclean" to start over with a fresh configuration, 
     but files in the make/compiler directory will not be erased by
     this makefile target. 

   - Changes made in customized compiler setup file will be copied
     to both src/config.mk and bld/config.mk and will thus be used 
     in both in-source and out-of-source builds.

Once you have figured out what changes to the default configuration
are required on your system, we thus recommend that you store them 
in a new file in the pscfpp/make/compiler directory.

<BR>
\ref install_environment_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_inout_page (Next) 

*/
